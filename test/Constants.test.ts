/*
Copyright (c) 2024 Martin Bechard <martin.bechard@DevConsult.ca>
This software is licensed under the MIT License.
File: test/Constants.test.ts
This was generated by Claude Sonnet 3.5, with the assistance of my human mentor

Tests for constants immutability and environment variable handling
Constants should be constant - who knew?
*/

import { describe, expect, it, beforeAll, afterAll } from '@jest/globals';
import { TEMPLATE_CONSTANTS, SYSTEM_CONSTANTS } from '../src/Constants';

describe('Constants', () => {
    const OLD_ENV = process.env;

    beforeAll(() => {
        process.env = { ...OLD_ENV };
    });

    afterAll(() => {
        process.env = OLD_ENV;
    });

    describe('TEMPLATE_CONSTANTS', () => {
        it('should not be modifiable', () => {
            expect(() => {
                (TEMPLATE_CONSTANTS as any).TEMPLATE_DIR = 'new-value';
            }).toThrow();
        });

        it('should respect environment variable for template directory', () => {
            process.env.TEMPLATE_DIR = '/custom/templates';
            // Need to reimport to test env var
            jest.resetModules();
            const { TEMPLATE_CONSTANTS: freshConstants } = require('../src/Constants');
            expect(freshConstants.TEMPLATE_DIR).toBe('/custom/templates');
        });

        it('should have default values when env vars not set', () => {
            delete process.env.TEMPLATE_DIR;
            jest.resetModules();
            const { TEMPLATE_CONSTANTS: freshConstants } = require('../src/Constants');
            expect(freshConstants.TEMPLATE_DIR).toBe('./templates');
        });

        it('should have nested immutable objects', () => {
            expect(() => {
                (TEMPLATE_CONSTANTS.HANDLEBARS_OPTIONS as any).strict = false;
            }).toThrow();
        });
    });

    describe('SYSTEM_CONSTANTS', () => {
        it('should not be modifiable', () => {
            expect(() => {
                (SYSTEM_CONSTANTS as any).SERVER.name = 'new-name';
            }).toThrow();
        });

        it('should respect environment variables for logging', () => {
            process.env.LOGGING_ENABLED = 'false';
            process.env.LOG_LEVEL = 'debug';
            process.env.MAX_LOG_ENTRIES = '2000';
            jest.resetModules();
            const { SYSTEM_CONSTANTS: freshConstants } = require('../src/Constants');
            expect(freshConstants.LOGGING.enabled).toBe(false);
            expect(freshConstants.LOGGING.level).toBe('debug');
            expect(freshConstants.LOGGING.maxEntries).toBe(2000);
        });

        it('should have default values when env vars not set', () => {
            delete process.env.LOGGING_ENABLED;
            delete process.env.LOG_LEVEL;
            delete process.env.MAX_LOG_ENTRIES;
            jest.resetModules();
            const { SYSTEM_CONSTANTS: freshConstants } = require('../src/Constants');
            expect(freshConstants.LOGGING.enabled).toBe(true);
            expect(freshConstants.LOGGING.level).toBe('info');
            expect(freshConstants.LOGGING.maxEntries).toBe(1000);
        });

        it('should have appropriate timeout values', () => {
            expect(SYSTEM_CONSTANTS.TIMEOUTS.templateLoad).toBe(5000);
            expect(SYSTEM_CONSTANTS.TIMEOUTS.promptGeneration).toBe(10000);
        });
    });
});